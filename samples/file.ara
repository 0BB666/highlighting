namespace Sample;

use Psl\IO;
use Psl\Shell;

enum Bar: int {
    case Foo = 1;
}

enum Baz: string {
    case Foo = 'foo';
    case Bar = 'bar';

    public function bar(): void {}
}

enum Q { case Q; }

interface Foo extends Bar, Baz {}

final readonly class Box<T> {
    public function __construct(private T $value) {}

    public function map<O>((fn(T): O) $f): Box<O> {
        return new Box($f($this->value));
    }

    public function value(): T {
        return $this->value;
    }

    public function cloned(): T
        where T is object
    {
        return clone $this->value;
    }
}

function main(): void {
    $box = new Box(1);

    IO\write_line("Box value: %d", $box->value());

    $box = $box->map(fn(int $value): int => $value + 1);
    $box = $box->map::<int>(fn(int $value): int => $value + 1);

    $handle = async do_some_work();

    await $handle;
}

function do_some_work(): void {
    concurrently {
        Shell\execute('sleep', vec['1']),
        Shell\execute('sleep', vec['1']),
        Shell\execute('sleep', vec['1']),
    }
}

function foo(): never {
    $a = $a + $b;
    $a = $a - $b;
    $a = $a * $b;
    $a = $a / $b;
    $a = $a % $b;
    $a = $a ** $b;
    $a = $a << $b;
    $a = $a >> $b;
    $a = $a & $b;
    $a = $a | $b;
    $a = $a ^ $b;
    $a = $a && $b;
    $a = $a || $b;
    $a = $a ?? $b;
    $a = $a <=> $b;
    $a = $a === $b;
    $a = $a !== $b;
    $a = $a == $b;
    $a = $a != $b;
    $a = $a < $b;
    $a = $a > $b;
    $a = $a <= $b;
    $a = $a >= $b;
    $a ??= $b;
    $a += $b;
    $a -= $b;
    $a *= $b;
    $a /= $b;
    $a %= $b;
    $a **= $b;
    $a <<= $b;
    $a >>= $b;
    $a &= $b;
    $a |= $b;
    $a ^= $b;
    $a &&= $b;
    $a ||= $b;
    $a = $a++;
    $a = $a--;
    $a = ++$a;
    $a = --$a;
    $a = $a + 1;
    $a = $a - 1;
    $a = $a * 1;
    $a = $a / 1;
    $a = $a % 1;
    $a = $a ** 1;
    $a = $a << 1;
    $a = $a >> 1;
    $a = $a & 1;
    $a = $a | 1;
    $a = $a ^ 1;
    $a = $a && 1;
    $a = $a || 1;
    $a = $a ?? 1;
    $a = $a <=> 1;
    $a = $a === 1;
    $a = $a !== 1;
    $a = $a == 1;
    $a = $a != 1;
    $a = $a < 1;
    $a = $a > 1;
    $a = $a <= 1;
    $a = $a >= 1;
    $a ??= 1;
    $a += 1;
    $a -= 1;
    $a *= 1;
    $a /= 1;
    $a %= 1;
    $a **= 1;
    $a <<= 1;
    $a >>= 1;
    $a &= 1;
    $a |= 1;
    $a ^= 1;
    $a &&= 1;
    $a ||= 1;
    
    yield 1;
    yield $a;
    yield from $a;
    yield from vec[1, 2, 3];
    yield from dict['a' => 1, 'b' => 2, 'c' => 3];

    if $a {
        return;
    }

    if $a {
        return 1;
    }

    if $a {
        return;
    } else {
        return;
    }

    if $a {
        return 1;
    } elseif $b {
        return 2;
    }

    if $a {
        return 1;
    } elseif $b {
        return 2;
    } else {
        return 3;
    }

    while $a {
        return;
    }

    do {
        return;
    } while $a;

    for $a = 1; $a < 10; $a++ {
        return;
    }

    foreach $a as $b {
        return;
    }

    foreach $a as $b => $c {
        return;
    }

    $c = match ($a) {
        1 => 1,
        2 => 2,
        3 => 3,
        default => return,
    };

    $c = match ($a) {
        1 => 1,
        2 => 2,
        3 => 3,
        default => return 1,
    };

    async foo();
    await foo();

    concurrently {
        foo(),
        foo(),
        foo(),
    };

    $a = $a ? $b : $c;
    $a = $a ?: $b;
    $a = $a ?? $b;

    exit(1);
}
